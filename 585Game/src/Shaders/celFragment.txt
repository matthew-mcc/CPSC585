#version 330 core
out vec4 FragColor;

in vec3 FragPos;
in vec3 normal;
in vec2 TexCoords;
in vec4 FragPosLightSpace;

uniform sampler2D texture_diffuse1;
uniform sampler2D nearShadowMap;
uniform sampler2D farShadowMap;

uniform vec3 lightColor;
uniform vec3 shadowColor;
uniform vec3 sun;
uniform float band;
uniform float gradient;
uniform float shift;

uniform float minBias;
uniform float maxBias;

float ShadowCalculation(vec4 fragPosLightSpace)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(nearShadowMap, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // check whether current frag pos is in shadow
    float bias = max(maxBias * (1.0 - dot(normal, normalize(sun))), minBias);
    bias /= (100.0 - 0.1) / (7.5 - 1.0);
    //float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(nearShadowMap, 0);
    for(int x = -1; x <= 1; ++x) {
        for(int y = -1; y <= 1; ++y) {
            float pcfDepth = texture(nearShadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;     
        }    
    }
    shadow /= 9.0;

    if(projCoords.z > 1.0)
        shadow = 0.0;

    return shadow;
}

void main(){
    float nl = dot(normal, normalize(sun));
    vec3 light;
    vec3 middleColor = (lightColor + shadowColor) / 2.0;

    float shadow = ShadowCalculation(FragPosLightSpace);    //Calculate if point is in shadow

    if (nl > shift + band + gradient) {
        light = (1.0 - shadow)*lightColor + (shadow)*middleColor;
        /*light = lightColor;
        if (shadow > 0.0)
            light = middleColor;*/
    }

    else if (nl > shift + band - gradient) {
        float i = (nl - (shift + band - gradient)) / (2.0*gradient);
        light = i*lightColor + (1-i)*middleColor;
        light = (1.0 - shadow)*light + (shadow)*middleColor;
        /*if (shadow > 0.0)
            light = middleColor;*/
    }

    else if (nl > shift - band + gradient) {
        light = middleColor;
    }

    else if (nl > shift - band - gradient) {
        float i = (nl - (shift - band - gradient)) / (2.0*gradient);
        light = i*middleColor + (1-i)*shadowColor;
    }

    else
        light = shadowColor;

    FragColor = vec4(texture(texture_diffuse1, TexCoords).xyz * light, 1.0);
}